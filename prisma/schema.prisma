generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  RIDER
  STABLE
  INSTRUCTOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SubscriptionStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITING_LIST
  NO_SHOW
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  familyName    String?
  password      String
  role          UserRole @default(RIDER)  // Utilisation de l'enum
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  stableId     String?
  stable       User?     @relation("StableRiders", fields: [stableId], references: [id])
  riders       User[]    @relation("StableRiders")

  address      Address?

  instructorId String?
  instructor   User?     @relation("InstructorRiders", fields: [instructorId], references: [id])
  students     User[]    @relation("InstructorRiders")

  // Nouvelles relations pour Booking
  createdBookings Booking[]
  subscriptions   BookingSubscription[]

  refreshTokens RefreshToken[]

  @@index([stableId])
  @@index([instructorId])
}

model Booking {
  id Int @id @default(autoincrement())
  userId String
  title String
  discipline String
  description String
  location String
  date DateTime
  start String
  end String
  status BookingStatus @default(PENDING) 
  maxParticipants Int    @default(1) 
  requiredLevel Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator         User      @relation(fields: [userId], references: [id])
  subscriptions   BookingSubscription[]
}

model Address {
  id            String   @id @default(cuid())
  street        String
  zipCode       String
  city          String
  country       String
  additionalInfo String?
  latitude      Float?
  longitude     Float?
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique  // One-to-one relation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model BookingSubscription {
  id Int @id @default(autoincrement())
  userId String
  bookingId Int
  status SubscriptionStatus @default(PENDING) 
  position Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking     Booking   @relation(fields: [bookingId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([bookingId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique  @db.VarChar(500)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}
